[
    {
        "id": "d27ff7acba5e037e",
        "type": "tab",
        "label": "Main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f39649b35540991f",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": 8,
        "parity": "none",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": 10000
    },
    {
        "id": "93adbbc9bc8eeabe",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9822daba911d8846",
        "type": "ui_tab",
        "name": "Monitoring",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "89221f1b3e1e0dd1",
        "type": "ui_group",
        "name": "Sensor Data",
        "tab": "9822daba911d8846",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "32058175d5771dde",
        "type": "ui_group",
        "name": "Controls",
        "tab": "9822daba911d8846",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "56688f1969147e9e",
        "type": "ui_group",
        "name": "Weather API",
        "tab": "9822daba911d8846",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5d42f12891b474f7",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.8.140",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0f25c96d5a604298",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "process_sensor_data",
        "func": "let data = msg.payload;\nlet sensors = flow.get(\"sensorData\");\nlet updatedSensors = data.sensors;\n\n// update appropriate sensors\nupdatedSensors.forEach(sensor => {\n    let existingSensor = sensors.find(s => s.id === sensor.id && s.type === sensor.type);\n\n    if (existingSensor) {\n        if (sensor.type === \"SOIL\") {\n            existingSensor.moisture = sensor.moisture;\n\n        } else if (sensor.type === \"DHT_SENSOR\") {\n            existingSensor.humidity = sensor.humidity;\n            existingSensor.temperature = sensor.temperature;\n        }\n    }\n});\n\n// update sensor data in the flow\nflow.set(\"sensorData\", sensors);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 120,
        "wires": [
            [
                "49f58424f2ecc968",
                "b4ede96e1072c9b8"
            ]
        ]
    },
    {
        "id": "a66fbdc432908dca",
        "type": "http in",
        "z": "d27ff7acba5e037e",
        "name": "",
        "url": "/sensor-data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 980,
        "wires": [
            [
                "64a99cfa8ceea933"
            ]
        ]
    },
    {
        "id": "64a99cfa8ceea933",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "parse_data",
        "func": "var sensorData = flow.get(\"sensorData\") || {};\nmsg.payload = sensorData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 980,
        "wires": [
            [
                "9b790e487fcb9bfd"
            ]
        ]
    },
    {
        "id": "9b790e487fcb9bfd",
        "type": "http response",
        "z": "d27ff7acba5e037e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 980,
        "wires": []
    },
    {
        "id": "9bd104a1d69e724f",
        "type": "inject",
        "z": "d27ff7acba5e037e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "0 5-17 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "READ",
        "payloadType": "str",
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "083c4b7369ede12a",
                "35a8bc56db8a3151"
            ]
        ]
    },
    {
        "id": "b4ede96e1072c9b8",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "water",
        "func": "let data = flow.get(\"sensorData\"); // array of sensors\nlet pumps = flow.get(\"pumpData\");  // array of pumps\n// weather forecast\nlet totalPrecip = parseFloat(flow.get(\"totalPrecipHourly\")) || 0; // total precipitation in mm today\nlet probPrecip = flow.get(\"probPrecip\") || []; // true if precipitation probability above 30\nlet hourlyPrecip = flow.get(\"hourlyRain\") || []; // array with hourly percipitation \n\nlet recheckActive = flow.get(\"isRecheckActive\") || false;\nlet outputMsgs = [];    // output commands\n\nlet moistureThreshold = 1500;    // wet soil\n\n\ndata.forEach(sensor => {\n    // skip DHT and inactive sensors\n    if (sensor.type !== \"SOIL\" || sensor.active === 0) {\n        return;\n    }\n\n    let soilMoisture = sensor.moisture;\n    let pumpId = sensor.pump;\n    let command = \"\";\n\n    // set default values\n    let env = \"INDOOR\"; \n    let defaultWaterMode = \"AUTO\";\n    let customWaterAmount = 0;\n\n    // get associated pump\n    let pump = pumps.find(item => item.id === pumpId);\n    if (pump) {\n        env = pump.env;\n        defaultWaterMode = pump.currentWaterMode;\n        customWaterAmount = pump.amount;\n    }\n\n    // User overriden watering mode\n    if (defaultWaterMode !== \"AUTO\") {\n        if (defaultWaterMode === \"CUSTOM\" && customWaterAmount > 0) {\n            command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" CUSTOM \" + customWaterAmount;\n            // flow.set(\"lastWateringMode\", msg.payload.substring(6,13));\n        } else {\n            command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" \" + defaultWaterMode;\n            // flow.set(\"lastWateringMode\", msg.payload.substring(6,));\n        }\n\n        // don't send the same command twice\n        if (!outputMsgs.some(output => output.payload === command)) {\n            outputMsgs.push({ payload: command });\n        }   \n        \n        return;\n    }\n\n    // INDOOR MODE\n    if (env === \"INDOOR\") {\n        if (soilMoisture <= moistureThreshold) {\n            command = \"IDLE \" + pumpId.toString() + \" \" + sensor.id.toString();\n        } else if (soilMoisture <= 2000) {\n            command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" LIGHT\";\n        } else if (soilMoisture <= 2500) {\n            command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" MEDIUM\";\n        } else {\n            command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" HEAVY\";\n        }\n    }\n    // OUTDOOR MODE\n    else {\n        // check forecast (if rain is expected in next 4/6 hours)\n        let d = new Date().getUTCHours() // get current hour in UTC\n        // how many hours to check forecast for\n        let checkHrs = (d === 17) ? 6 : 4;  // if last check of the day, check next 6 hours\n        let checkMax = Math.min(d+checkHrs, hourlyPrecip.length) // get the upper boundary index for weather check\n\n        // get total precipitation mm and max precipitation probabilty in next x hours \n        let totalRainNextHours = 0;\n        let maxPrecipProb = 0;\n        for (var i = d; i < checkMax; i++) {\n            totalRainNextHours += hourlyPrecip[i];\n            \n            if (probPrecip[i] > maxPrecipProb) {\n                maxPrecipProb = probPrecip[i];\n            }\n        }\n\n        // determine if watering needed\n        if (soilMoisture<= moistureThreshold) {\n            command = \"IDLE \" + pumpId.toString();   // no need to water\n        }\n        else if (soilMoisture <= 2000) {\n            if (maxPrecipProb < 30) {\n                command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" LIGHT\";\n            } else {\n                command = \"IDLE \" + pumpId.toString() + \" \" + sensor.id.toString();\n            }\n        } else if (soilMoisture <= 2500) {\n            if (maxPrecipProb < 30) {\n                command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" MEDIUM\";\n            } else if (totalRainNextHours < 2) {\n                command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" LIGHT\";\n            } else {\n                command = \"IDLE \" + pumpId.toString() + \" \" + sensor.id.toString();\n            }\n        } else {    // soil is dry\n            if (maxPrecipProb < 30) {\n                command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" HEAVY\";\n            } else if (totalRainNextHours < 2) {\n                command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" MEDIUM\";\n            } else if (totalRainNextHours < 4) {\n                command = \"WATER \" + pumpId.toString() + \" \" + sensor.id.toString() + \" LIGHT\";\n            } else {\n                command = \"IDLE \" + pumpId.toString();\n            }\n        }\n    }\n\n    // don't send the same command twice\n    if (!outputMsgs.some(output => output.payload === command)) {\n        outputMsgs.push({ payload: command });\n    }\n\n\n})\n\n\n// store chosen watering mode into flow for log\n// flow.set(\"lastWateringMode\", msg.payload.substring(6,));\n\n// recheck soil moisture after 10 minutes if watering\nif (!recheckActive) {\n    if (outputMsgs.some(msg => msg.payload.includes(\"WATER\"))) {\n        flow.set(\"isRecheckActive\", true);\n        setTimeout(() => {\n            // send READ message to trigger new reading and function execution\n            node.send({ payload: \"READ\"});  \n            }, 600000);   // recheck in 10 minutes\n    }\n} else {\n    flow.set(\"isRecheckActive\", false);    \n} \n\nreturn [outputMsgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 120,
        "wires": [
            [
                "ec61008359c39560",
                "35a8bc56db8a3151",
                "49f58424f2ecc968"
            ]
        ]
    },
    {
        "id": "c0388066fca0e290",
        "type": "http request",
        "z": "d27ff7acba5e037e",
        "name": "current weather api ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.open-meteo.com/v1/forecast?latitude=51.898&longitude=-8.4706&current_weather=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 840,
        "wires": [
            [
                "40da37c3a039ece7"
            ]
        ]
    },
    {
        "id": "562d551e6ea129af",
        "type": "inject",
        "z": "d27ff7acba5e037e",
        "name": "weather api",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 720,
        "wires": [
            [
                "c0388066fca0e290",
                "ba1b3d895e52848a"
            ]
        ]
    },
    {
        "id": "40da37c3a039ece7",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "parse_weather_api",
        "func": "let data = JSON.parse(msg.payload);\nlet current = data.current_weather;\n\nlet date = new Date(current.time)\nlet formatted_date = date.toLocaleString(\"en-GB\", {\n    day: \"2-digit\",\n    month: \"short\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false\n}).replace(\",\", \"\");\n\n\nmsg.payload = {\n    temp: current.temperature + \" °C\",\n    windspeed: current.windspeed + \" km/h\",\n    winddirection: current.winddirection + \"°\",\n    time: formatted_date\n    }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 840,
        "wires": [
            [
                "1cd47af34da9410b",
                "9ff9d3722a1a7b69",
                "da61cf5cfdd80191",
                "487192047a9b714b",
                "da5a3b8216fe6eb0"
            ]
        ]
    },
    {
        "id": "1cd47af34da9410b",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.temp}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 780,
        "wires": []
    },
    {
        "id": "9ff9d3722a1a7b69",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wind Speed",
        "format": "{{msg.payload.windspeed}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 820,
        "wires": []
    },
    {
        "id": "da61cf5cfdd80191",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wind Direction",
        "format": "{{msg.payload.winddirection}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 860,
        "wires": []
    },
    {
        "id": "ba1b3d895e52848a",
        "type": "http request",
        "z": "d27ff7acba5e037e",
        "name": "forecast 1d api",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.open-meteo.com/v1/forecast?latitude=51.898&longitude=-8.4706&hourly=precipitation_probability,rain,showers&forecast_days=1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 300,
        "y": 660,
        "wires": [
            [
                "a7a08a6b4dad935f"
            ]
        ]
    },
    {
        "id": "a7a08a6b4dad935f",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "parse_forecast_api",
        "func": "let data = JSON.parse(msg.payload);\nlet rain = data.hourly.rain;\nlet showers = data.hourly.showers;\nlet probability = data.hourly.precipitation_probability;\n\n// get total rain + showers in mm\nlet totalPrecipitationHourly = [];\nlet totalPrecip = 0;\nfor (var i = 0; i < 24; i++) {\n    totalPrecipitationHourly[i] = rain[i] + showers[i];\n    totalPrecip += rain[i] + showers[i];\n}\n\ntotalPrecip = Math.floor(totalPrecip*100)/100;\n\n// find maximum precipitation probability\nlet maxPrecipProb = Math.max(...probability);\n\n// save data in the flow\nflow.set(\"totalPrecipHourly\", totalPrecipitationHourly);\nflow.set(\"probabPrecip\", probability);\nflow.set(\"hourlyRain\", rain);\n\nmsg.payload = {\n    totalPrecipHourly: totalPrecipitationHourly,\n    totalPrecip: totalPrecip,\n    probabPrecip: probability,\n    hourlyRain: rain,\n    maxPrecipProb: maxPrecipProb\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 660,
        "wires": [
            [
                "5f96e176689cce61",
                "cc3e4bd4a741bcd4",
                "da5a3b8216fe6eb0"
            ]
        ]
    },
    {
        "id": "da5a3b8216fe6eb0",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 740,
        "wires": []
    },
    {
        "id": "5f96e176689cce61",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Total Predicted Rainfall Today",
        "format": "{{msg.payload.totalPrecip}} mm",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 890,
        "y": 640,
        "wires": []
    },
    {
        "id": "cc3e4bd4a741bcd4",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Highest Probabilty of Rainfall",
        "format": "{{msg.payload.maxPrecipProb}}%",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 880,
        "y": 680,
        "wires": []
    },
    {
        "id": "0b7ce3cd5e5c992c",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "update_pumps",
        "func": "let pumps = flow.get(\"pumpData\");\nlet updatedPump = msg.payload;\nlet pumpIndex = pumps.findIndex(pump => pump.id === updatedPump.id);\n\nif (pumps[pumpIndex].type === \"WATERING\") {\n    pumps[pumpIndex].currentWaterMode = updatedPump.currentWaterMode;\n    pumps[pumpIndex].env = updatedPump.env;\n\n    // watering\n    let wateringModes = [\"LIGHT\", \"MEDIUM\", \"HEAVY\"];\n    let waterCommand;\n\n    if (wateringModes.includes(updatedPump.currentWaterMode)) {\n        waterCommand = \"CHMOD \" + updatedPump.id.toString() + \" \" + updatedPump.currentWaterMode;\n\n    } else if (updatedPump.currentWaterMode === \"CUSTOM\") {\n        waterCommand = \"CHMOD \" + updatedPump.id.toString() + \" CUSTOM \" + updatedPump.amount.toString();\n        pumps[pumpIndex].amount = parseInt(updatedPump.amount);\n\n    } else if (updatedPump.currentWaterMode === \"AUTO\") {\n        waterCommand = \"CHMOD \" + updatedPump.id.toString() + \" AUTO\"; // default value (will change automatically)\n\n    } else {\n        node.warn(\"Invalid input for CHMOD.\");\n        return null;\n    }\n\n    // environment\n    let envModes = [\"INDOOR\", \"OUTDOOR\"];\n    let envCommand;\n\n    if (envModes.includes(updatedPump.env)) {\n        envCommand = \"SET_ENV \" + updatedPump.id.toString() + \" \" + updatedPump.env;\n    } else {\n        node.warn(\"Invalid input for SET_ENV.\")\n        return null;\n    }\n\n    flow.set(\"pumpData\", pumps);\n\n    return [[{payload: waterCommand},{payload: envCommand}]];\n} \n// fertilization pump\nelse {    \n    pumps[pumpIndex].amount = updatedPump.amount;\n    flow.set(\"pumpData\", pumps);\n    msg.payload = \"SET_FERT_AMOUNT \" + updatedPump.id.toString() + \" \" + updatedPump.amount;\n    return msg;\n}\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 460,
        "wires": [
            [
                "9218897efed46d9e",
                "35a8bc56db8a3151"
            ]
        ]
    },
    {
        "id": "9218897efed46d9e",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 360,
        "wires": []
    },
    {
        "id": "d4bc37cb6b14bcdd",
        "type": "csv",
        "z": "d27ff7acba5e037e",
        "name": "",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "timestamp,pump,sensor,env,moisture,waterAmount",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 970,
        "y": 40,
        "wires": [
            [
                "d5db91812b763d19"
            ]
        ]
    },
    {
        "id": "d5db91812b763d19",
        "type": "file",
        "z": "d27ff7acba5e037e",
        "name": "",
        "filename": "/home/pi/fyp/readings.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1270,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "49f58424f2ecc968",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "ec61008359c39560",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "log_idle",
        "func": "let data = msg.payload;\nlet splitMsg = data.split(\" \"); // IDLE pumpID sensorID\n\nif (splitMsg[0] === \"IDLE\") {\n    let sensors = flow.get(\"sensorData\");\n    let pumps = flow.get(\"pumpData\");\n\n    let pumpId = parseInt(splitMsg[1]);\n    let sensorId = parseInt(splitMsg[2]);\n\n    let pump = pumps.find(p => p.id === pumpId);\n    let sensor = sensors.find(s => s.id === sensorId && s.type === \"SOIL\");\n\n    let date = new Date();\n    let formatted_date = date.toLocaleString(\"en-GB\", {\n    day: \"2-digit\",\n    month: \"short\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false\n    }).replace(\",\", \"\");\n    \n    data = {}\n    data.sensor = sensorId;\n    data.pump = pumpId;\n    data.timestamp = formatted_date;\n    data.waterAmount = 0;\n    data.env = pump.env;\n    data.moisture = sensor.moisture;\n\n    msg.payload = data;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "49f58424f2ecc968",
                "d4bc37cb6b14bcdd"
            ]
        ]
    },
    {
        "id": "083c4b7369ede12a",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 200,
        "wires": []
    },
    {
        "id": "a8a888fa98dae805",
        "type": "mqtt in",
        "z": "d27ff7acba5e037e",
        "name": "",
        "topic": "irrigation/readings",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5d42f12891b474f7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "0f25c96d5a604298",
                "49f58424f2ecc968"
            ]
        ]
    },
    {
        "id": "35a8bc56db8a3151",
        "type": "mqtt out",
        "z": "d27ff7acba5e037e",
        "name": "",
        "topic": "irrigation/control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5d42f12891b474f7",
        "x": 1380,
        "y": 300,
        "wires": []
    },
    {
        "id": "8dee672ec47f757f",
        "type": "inject",
        "z": "d27ff7acba5e037e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "WATER 1",
        "payloadType": "str",
        "x": 1240,
        "y": 120,
        "wires": [
            [
                "35a8bc56db8a3151"
            ]
        ]
    },
    {
        "id": "130afca86a9ccf1f",
        "type": "mqtt in",
        "z": "d27ff7acba5e037e",
        "name": "",
        "topic": "irrigation/notice",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5d42f12891b474f7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 80,
        "y": 40,
        "wires": [
            [
                "d7bda9c37085a43c"
            ]
        ]
    },
    {
        "id": "487192047a9b714b",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last data update",
        "format": "{{msg.payload.time}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 850,
        "y": 900,
        "wires": []
    },
    {
        "id": "b550b59d364fc311",
        "type": "ui_template",
        "z": "d27ff7acba5e037e",
        "group": "89221f1b3e1e0dd1",
        "name": "sensors_ui",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<div ng-init=\"sensors = []; pumps = []\">\n    <h2>Soil Moisture Sensors</h2>\n    <div ng-repeat=\"sensor in sensors\">\n        <div ng-if=\"sensor.type == 'SOIL'\">\n            <h3>Sensor {{sensor.id}}</h3>\n\n            <div ng-if=\"sensor.active == 1\">\n                <p>Moisture: {{sensor.moisture}}</p>\n                <label>Pump:</label>\n                <select ng-model=\"sensor.pump\" ng-options=\"pumpId for pumpId in pumps\" ng-change=\"updateSensor(sensor)\">\n                                <option value=\"\"></option>\n                </select>\n            </div>\n\n            <div ng-if=\"sensor.active == 0\">\n                <p>Status: Inactive</p>\n            </div>\n        <hr/>    \n        </div>\n    </div>\n\n    <h2>DHT Sensors</h2>\n    <div ng-repeat=\"sensor in sensors\">\n        <div ng-if=\"sensor.type == 'DHT_SENSOR'\">\n            <h3>Sensor {{sensor.id}}</h3>\n\n            <div ng-if=\"sensor.active == 1\">\n                <p>Temperature: {{sensor.temperature}}°C</p>\n                <p>Humidity: {{sensor.humidity}}%</p>\n            </div>\n            \n            <div ng-if=\"sensor.active == 0\">\n                <p>Status: Inactive</p>\n            </div>\n        <hr />\n        </div>\n    </div>\n\n    </br>\n    <button ng-click=\"refresh()\">Refresh</button>\n</div>\n\n<script>\n    (function(scope) {\n        scope.$watch('msg', function(msg) {\n            if (msg.payload.sensors) {\n                scope.sensors = msg.payload.sensors;\n            }\n\n            if (msg.payload.pumps) {\n                scope.pumps = msg.payload.pumps;\n            }\n        });\n\n        scope.updateSensor = function(sensor) {\n            // scope.send({ payload: sensor});\n            scope.send({ payload: \"CH_PUMP \" + sensor.id + \" \" + sensor.pump });\n        };\n\n        scope.refresh = function() {\n            scope.send({ payload: \"GET_ALL\"});\n        };\n    })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "9218897efed46d9e",
                "35a8bc56db8a3151"
            ]
        ]
    },
    {
        "id": "d7bda9c37085a43c",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "process_notice",
        "func": "let data = msg.payload;\n\n// log error or notice messages from ESP\nnode.warn(\"Message: \" + JSON.stringify(data));\n\n// check notice contains information about watering \nif (data.hasOwnProperty(\"notice\") && data.notice.includes(\"watering_started\")) {\n    // msg: watering_started(pumpID, sensorID, amount)\n    let sensors = flow.get(\"sensorData\");\n    let pumps = flow.get(\"pumpData\");\n\n    let splitMsg = data.notice.split(\"(\");\n    let values = splitMsg[1].split(\",\");\n    \n    let pumpId = parseInt(values[0]);\n    let sensorId = parseInt(values[1]);\n    let amount = parseInt(values[2].substring(0,values[2].length-1));\n\n    let sensor = sensors.find(s => s.id === sensorId && s.type === \"SOIL\");\n    let pump = pumps.find(p => p.id === pumpId);\n\n    let date = new Date();\n    let formatted_date = date.toLocaleString(\"en-GB\", {\n    day: \"2-digit\",\n    month: \"short\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    hour12: false\n    }).replace(\",\", \"\");    \n\n    // manage data for log\n    data.pump = pumpId;\n    data.sensor = sensorId;\n    data.moisture = sensor.moisture;\n    data.timestamp = formatted_date;\n    data.waterAmount = amount;\n    data.env = pump.env;\n\n    msg.payload = data;\n    return msg;\n}\n\nif (data.hasOwnProperty(\"notice\") && data.notice.includes(\"pump_set\")) {\n    let sensors = flow.get(\"sensorData\");\n    let pumps = flow.get(\"pumpData\");\n    let splitMsg = data.notice.split(\"(\");\n    let pumpId = parseInt(splitMsg[1].substring(0,1));\n\n    let pump = pumps.find(p => p.id === pumpId);\n    pump.active = 1;\n    flow.set(\"pumpData\", pumps);\n\n    // contains sensor update info\n    if (splitMsg.length === 3) {\n        let sensorId = parseInt(splitMsg[2].substring(0,1));\n        let index = sensors.findIndex(s => s.id === sensorId);\n        \n        sensors[index].pump = pumpId;\n        flow.set(\"sensorData\", sensors);\n    }\n    \n    msg.payload = \"UPDATE\";\n    return msg;\n}\n\nif (data.hasOwnProperty(\"notice\") && data.notice.includes(\"pump_unset\")) {\n    let pumps = flow.get(\"pumpData\");\n    let splitMsg = data.notice.split(\"(\");\n    let pumpId = parseInt(splitMsg[1].substring(0,1));\n\n    let pump = pumps.find(p => p.id === pumpId);\n    pump.active = 0;\n    flow.set(\"pumpData\", pumps);\n\n    msg.payload = \"UPDATE\";\n    return msg;\n}\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 40,
        "wires": [
            [
                "aa80139673ea7f9f"
            ]
        ]
    },
    {
        "id": "1b5dd956e08ee398",
        "type": "mqtt in",
        "z": "d27ff7acba5e037e",
        "name": "",
        "topic": "irrigation/data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "5d42f12891b474f7",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 70,
        "y": 200,
        "wires": [
            [
                "67426dc7e1634013"
            ]
        ]
    },
    {
        "id": "67426dc7e1634013",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "store_pumps_sensors",
        "func": "let data = msg.payload;\n\nif (data.hasOwnProperty(\"pumps\")) {\n    flow.set(\"pumpData\", data.pumps);\n    msg.payload = data;\n}\nelse if (data.hasOwnProperty(\"sensors\")) {\n    flow.set(\"sensorData\", data.sensors);\n    msg.payload = data;\n} \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 200,
        "wires": [
            [
                "20eb51f4534b98e5",
                "e29d4f378020f376",
                "9cd49f64ca1c0a6a"
            ]
        ]
    },
    {
        "id": "d82d6c7c8be588f6",
        "type": "inject",
        "z": "d27ff7acba5e037e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "GET_ALL",
        "payloadType": "str",
        "x": 1000,
        "y": 160,
        "wires": [
            [
                "35a8bc56db8a3151"
            ]
        ]
    },
    {
        "id": "20eb51f4534b98e5",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 260,
        "wires": []
    },
    {
        "id": "63d02a3976e94dc0",
        "type": "ui_template",
        "z": "d27ff7acba5e037e",
        "group": "32058175d5771dde",
        "name": "pumps_ui",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<div ng-init=\"pumps = []\">\n    <h2>Watering</h2>\n    <div ng-repeat=\"pump in pumps\">\n        <div ng-if=\"pump.type=='WATERING'\">\n            <h3>Pump {{pump.id}}</h3>\n            <div ng-if=\"pump.active == 1\">\n                <label>Watering Mode:</label>\n                <select ng-model=\"pump.currentWaterMode\" ng-change=\"updatePump(pump)\">\n                    <option value = \"LIGHT\">Light</option>\n                    <option value = \"MEDIUM\">Medium</option>\n                    <option value = \"HEAVY\">Heavy</option>\n                    <option value = \"CUSTOM\">Custom</option>\n                    <option value = \"AUTO\">Automatic</option>\n                </select>\n                <div ng-if=\"pump.currentWaterMode=='CUSTOM'\">\n                    <label>Custom Amount (ml):</label>\n                    <input type=\"number\" ng-model=\"pump.amount\" ng-change=\"updatePump(pump)\"/>\n                </div>\n\n                <label>Environment:</label>\n                <select ng-model=\"pump.env\" ng-change=\"updatePump(pump)\">\n                    <option value = \"INDOOR\">Indoor</option>\n                    <option value = \"OUTDOOR\">Outdoor</option>\n                </select>\n\n                <button ng-click=\"water(pump)\">Manual Watering</button>\n                <button ng-click=\"deactivatePump(pump)\">Deactivate</button>\n            </div>\n\n            <div ng-if=\"pump.active == 0\">\n                <p>Status: Inactive</p>\n                <button ng-click=\"activatePump(pump)\">Activate</button>\n            </div>\n        <hr/>\n        </div>\n    </div>\n\n    <h2>Fertilization</h2>\n    <div ng-repeat=\"pump in pumps\">\n        <div ng-if=\"pump.type=='FERTILIZATION'\">\n            <h3>Pump {{pump.id}}</h3>\n            <div ng-if=\"pump.active == 1\">\n                <label>Amount (ml):</label>\n                <input type=\"number\" ng-model=\"pump.amount\" ng-change=\"updatePump(pump)\"/>\n                <button ng-click=\"fertilize(pump)\">Fertilize</button>\n                <button ng-click=\"deactivatePump(pump)\">Deactivate</button>\n            </div>\n\n            <div ng-if=\"pump.active == 0\">\n                <p>Status: Inactive</p>\n                <button ng-click=\"activatePump(pump)\">Activate</button>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n<script>\n    (function(scope) {\n        scope.$watch(\"msg\", function(msg) {\n            if (msg.payload.pumps) {\n                scope.pumps = msg.payload.pumps;\n            }\n        });\n\n        scope.updatePump = function(pump) {\n            scope.send({ payload: pump });\n        };\n\n        scope.water = function(pump) {\n            scope.send({ payload: \"WATER \" + pump.id  })\n        };\n\n        scope.fertilize = function(pump) {\n            scope.send({ payload: \"FERTILIZE \" + pump.id })\n        };\n\n        scope.activatePump = function(pump) {\n            scope.send({ payload: \"SET_STATUS 1 P \" + pump.id })\n        };\n\n        scope.deactivatePump = function(pump) {\n            scope.send({ payload: \"SET_STATUS 0 P \" + pump.id })\n        };\n    })(scope);\n</script>    ",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "83e5945683e998c8"
            ]
        ]
    },
    {
        "id": "83e5945683e998c8",
        "type": "switch",
        "z": "d27ff7acba5e037e",
        "name": "user_input",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "(WATER|FERTILIZE|SET_STATUS)",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 460,
        "wires": [
            [
                "26bc4ad2b8edb0dc",
                "35a8bc56db8a3151"
            ],
            [
                "0b7ce3cd5e5c992c"
            ]
        ]
    },
    {
        "id": "26bc4ad2b8edb0dc",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 560,
        "wires": []
    },
    {
        "id": "9cd49f64ca1c0a6a",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "get_pumps",
        "func": "let pumpData = flow.get(\"pumpData\");\nmsg.payload = { pumps: pumpData};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 460,
        "wires": [
            [
                "63d02a3976e94dc0"
            ]
        ]
    },
    {
        "id": "f3b997b1a32872c9",
        "type": "ui_ui_control",
        "z": "d27ff7acba5e037e",
        "name": "",
        "events": "all",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "9cd49f64ca1c0a6a",
                "e29d4f378020f376"
            ]
        ]
    },
    {
        "id": "e29d4f378020f376",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "get_sensors",
        "func": "let sensorData = flow.get(\"sensorData\");\nlet pumpData = flow.get(\"pumpData\");\nlet wateringPumps = pumpData.filter(p => p.type === \"WATERING\");\nmsg.payload = { sensors: sensorData, pumps: wateringPumps.map(p => p.id)};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 320,
        "wires": [
            [
                "b550b59d364fc311",
                "b9345f9042f243cf"
            ]
        ]
    },
    {
        "id": "b9345f9042f243cf",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 380,
        "wires": []
    },
    {
        "id": "aa80139673ea7f9f",
        "type": "switch",
        "z": "d27ff7acba5e037e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 40,
        "wires": [
            [
                "e29d4f378020f376",
                "9cd49f64ca1c0a6a"
            ],
            [
                "d4bc37cb6b14bcdd"
            ]
        ]
    }
]