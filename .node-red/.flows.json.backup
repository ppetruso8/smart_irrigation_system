[
    {
        "id": "d27ff7acba5e037e",
        "type": "tab",
        "label": "Main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f39649b35540991f",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": 8,
        "parity": "none",
        "stopbits": 1,
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": 10000
    },
    {
        "id": "93adbbc9bc8eeabe",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9822daba911d8846",
        "type": "ui_tab",
        "name": "Monitoring",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "89221f1b3e1e0dd1",
        "type": "ui_group",
        "name": "Sensor Data",
        "tab": "9822daba911d8846",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "32058175d5771dde",
        "type": "ui_group",
        "name": "Controls",
        "tab": "9822daba911d8846",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "56688f1969147e9e",
        "type": "ui_group",
        "name": "Weather API",
        "tab": "9822daba911d8846",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c8f8a9b50670e8ae",
        "type": "serial in",
        "z": "d27ff7acba5e037e",
        "name": "Arduino In",
        "serial": "f39649b35540991f",
        "x": 80,
        "y": 140,
        "wires": [
            [
                "0f25c96d5a604298"
            ]
        ]
    },
    {
        "id": "2c5e21c2cb152ca5",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 40,
        "wires": []
    },
    {
        "id": "0f25c96d5a604298",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "process_sensor_data",
        "func": "var data = JSON.parse(msg.payload);\nflow.set(\"sensor_data\", data);\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            [
                "0485e48b030f2229",
                "95f4e048225a7ca9",
                "172b2d31c0a42643",
                "b4ede96e1072c9b8",
                "2c5e21c2cb152ca5"
            ]
        ]
    },
    {
        "id": "a66fbdc432908dca",
        "type": "http in",
        "z": "d27ff7acba5e037e",
        "name": "",
        "url": "/sensor-data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 500,
        "wires": [
            [
                "64a99cfa8ceea933"
            ]
        ]
    },
    {
        "id": "64a99cfa8ceea933",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "parse_data",
        "func": "var sensorData = flow.get(\"sensor_data\") || {};\nmsg.payload = sensorData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 500,
        "wires": [
            [
                "9b790e487fcb9bfd"
            ]
        ]
    },
    {
        "id": "9b790e487fcb9bfd",
        "type": "http response",
        "z": "d27ff7acba5e037e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 500,
        "wires": []
    },
    {
        "id": "75407fc2116dfb94",
        "type": "serial out",
        "z": "d27ff7acba5e037e",
        "name": "Arduino Out",
        "serial": "f39649b35540991f",
        "x": 1130,
        "y": 300,
        "wires": []
    },
    {
        "id": "9bd104a1d69e724f",
        "type": "inject",
        "z": "d27ff7acba5e037e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "READ",
        "payloadType": "str",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "75407fc2116dfb94"
            ]
        ]
    },
    {
        "id": "0485e48b030f2229",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "89221f1b3e1e0dd1",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Soil Moisture",
        "format": "{{msg.payload.soil}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 530,
        "y": 100,
        "wires": []
    },
    {
        "id": "95f4e048225a7ca9",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "89221f1b3e1e0dd1",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.temp}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 530,
        "y": 140,
        "wires": []
    },
    {
        "id": "172b2d31c0a42643",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "89221f1b3e1e0dd1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Humidity",
        "format": "{{msg.payload.hum}} %",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 520,
        "y": 180,
        "wires": []
    },
    {
        "id": "b4ede96e1072c9b8",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "water",
        "func": "var data = flow.get(\"sensor_data\"); // sensor readings\nvar totalPrecip = parseFloat(flow.get(\"totalPrecip\")) || 0; // total precipitation in mm today\nvar highPrecipProb = flow.get(\"highPrecipProb\"); // true if precipitation probability above 30\nvar hourlyPercip = flow.get(\"hourlyRain\") || [0,0,0,0,0,0]; // array with hourly percipitation \nvar recheckActive = flow.get(\"recheckActive\") || false;\n\nvar moistureThreshold = 500;    // CALIBRATE\nvar rainThreshold = 2;  // min mm of rain today to skip watering\n\n// check if the forecast was accurate\nif (msg.payload === \"RECHECK\") {\n    // water if soil is dry even when rain was predicted\n    if (data.soil < moistureThreshold) {\n        msg.payload = \"WATER\";\n    } else {\n        msg.payload = \"IDLE\";\n    }\n    flow.set(\"recheckActive\", false);\n\n    return msg;\n}\n\n\n// check if rain is expected in next 6 hours\nvar d = new Date().getUTCHours() // get current hour in UTC (API setting)\nvar checkMax = Math.min(d+6, hourlyPercip.length)\n\nvar totalRainNext6Hours = 0;\nfor (var i = d; i < checkMax; i++) {\n    totalRainNext6Hours += hourlyPercip[d];\n    d++;\n}\n\n// check if watering needed\nif (data.soil < moistureThreshold &&    // if soil is dry\n    (totalPrecip < rainThreshold || !highPrecipProb)) {   // if there isn't much rainfall expected or the probability is low\n    msg.payload = \"WATER\";\n} else {    // rain is expected\n    msg.payload = \"IDLE\";\n\n    if (10 >= 2 && // confirm rain in 6 hours if expected\n        !recheckActive) {   // recheck is not activated yet\n        flow.set(\"recheckActive\", true);\n        setTimeout(() => {\n                node.send({ payload: \"RECHECK\"});\n            \n        }, 10000);   // 6 hours\n    }\n    \n}\n\n// if (data.soil < moistureThreshold) {\n//     msg.payload = \"WATER\";\n// } else {\n//     msg.payload = \"IDLE\";\n// }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 260,
        "wires": [
            [
                "49f58424f2ecc968",
                "d2360180ec71020e"
            ]
        ]
    },
    {
        "id": "49f58424f2ecc968",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 180,
        "wires": []
    },
    {
        "id": "54b2e13c8ec7b998",
        "type": "ui_button",
        "z": "d27ff7acba5e037e",
        "name": "",
        "group": "32058175d5771dde",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "manual watering",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "WATER",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 820,
        "y": 360,
        "wires": [
            [
                "75407fc2116dfb94"
            ]
        ]
    },
    {
        "id": "c0388066fca0e290",
        "type": "http request",
        "z": "d27ff7acba5e037e",
        "name": "current weather api ",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.open-meteo.com/v1/forecast?latitude=51.898&longitude=-8.4706&current_weather=true",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 310,
        "y": 840,
        "wires": [
            [
                "40da37c3a039ece7"
            ]
        ]
    },
    {
        "id": "562d551e6ea129af",
        "type": "inject",
        "z": "d27ff7acba5e037e",
        "name": "weather api",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 720,
        "wires": [
            [
                "c0388066fca0e290",
                "ba1b3d895e52848a"
            ]
        ]
    },
    {
        "id": "40da37c3a039ece7",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "parse_weather_api",
        "func": "var data = JSON.parse(msg.payload);\nvar current = data.current_weather;\n\nmsg.payload = {\n    temp: current.temperature + \" Â°C\",\n    windspeed: current.windspeed + \" km/h\",\n    winddirection: current.winddirection + \"Â°\",\n    time: current.time\n    }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 840,
        "wires": [
            [
                "1cd47af34da9410b",
                "9ff9d3722a1a7b69",
                "da61cf5cfdd80191",
                "487192047a9b714b"
            ]
        ]
    },
    {
        "id": "1cd47af34da9410b",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature",
        "format": "{{msg.payload.temp}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "9ff9d3722a1a7b69",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wind Speed",
        "format": "{{msg.payload.windspeed}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 770,
        "y": 820,
        "wires": []
    },
    {
        "id": "da61cf5cfdd80191",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wind Direction",
        "format": "{{msg.payload.winddirection}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 780,
        "y": 860,
        "wires": []
    },
    {
        "id": "487192047a9b714b",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time",
        "format": "{{msg.payload.time}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 750,
        "y": 900,
        "wires": []
    },
    {
        "id": "ba1b3d895e52848a",
        "type": "http request",
        "z": "d27ff7acba5e037e",
        "name": "forecast 1d api",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.open-meteo.com/v1/forecast?latitude=51.898&longitude=-8.4706&hourly=precipitation_probability,rain,showers&forecast_days=1",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 300,
        "y": 660,
        "wires": [
            [
                "a7a08a6b4dad935f"
            ]
        ]
    },
    {
        "id": "a7a08a6b4dad935f",
        "type": "function",
        "z": "d27ff7acba5e037e",
        "name": "parse_forecast_api",
        "func": "var data = JSON.parse(msg.payload);\nvar rain = data.hourly.rain;\nvar showers = data.hourly.showers;\nvar probability = data.hourly.precipitation_probability;\n\n// total rain + showers in mm\nvar totalPrecipitation = 0;\n\n// boolean checking highest probability of precipitation is above threshold\nvar highProbability = false;\n\n// count the total precipitation from 6am\nfor (var i = 6; i < 24; i++) {\n    totalPrecipitation += rain[i] + showers[i]\n\n    // if probability is below 30 then it is less likely for rain/showers to happen\n    if (probability[i] >= 30) {\n        highProbability = true;\n    }\n}\n\n// save data in the flow\nflow.set(\"totalPrecip\", totalPrecipitation.toFixed(2));\nflow.set(\"highPrecipProb\", highProbability);\nflow.set(\"hourlyRain\", rain);\n\nmsg.payload = {\n    totalPrecip: totalPrecipitation.toFixed(2),\n    highPrecipProb: highProbability,\n    hourlyRain: rain\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 660,
        "wires": [
            [
                "5f96e176689cce61",
                "cc3e4bd4a741bcd4",
                "da5a3b8216fe6eb0"
            ]
        ]
    },
    {
        "id": "da5a3b8216fe6eb0",
        "type": "debug",
        "z": "d27ff7acba5e037e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 740,
        "wires": []
    },
    {
        "id": "5f96e176689cce61",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Total Predicted Rainfall Today",
        "format": "{{msg.payload.totalPrecip}} mm",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 640,
        "wires": []
    },
    {
        "id": "cc3e4bd4a741bcd4",
        "type": "ui_text",
        "z": "d27ff7acba5e037e",
        "group": "56688f1969147e9e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Probability of Rainfall  >30%",
        "format": "{{msg.payload.highPrecipProb}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 680,
        "wires": []
    },
    {
        "id": "d2360180ec71020e",
        "type": "switch",
        "z": "d27ff7acba5e037e",
        "name": "water output to arduino OR recheck",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "WATER",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IDLE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RECHECK",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "75407fc2116dfb94"
            ],
            [
                "75407fc2116dfb94"
            ],
            [
                "b4ede96e1072c9b8"
            ]
        ]
    }
]